{
  "hash": "c37f4161109494ab9dbf3fb119c5f1fa",
  "result": {
    "markdown": "# DIF using proportion correct\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(list=ls())\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.2     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.1     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\n# load in the dataset\nresponses <- read_csv('data/responses.csv')\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nRows: 3061 Columns: 45\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (23): id, gender, dob, Q1, Q2, Q3, Q4, Q5, Q6, Q7, Q8, Q9, Q10, Q11, Q12...\ndbl (22): yg, missing, Q1_score, Q2_score, Q3_score, Q4_score, Q5_score, Q6_...\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n```\n:::\n\n```{.r .cell-code}\nresponses <- responses %>% drop_na(gender)\nresponses <- responses %>% select(gender, Q1_score:Q20_score)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Pivot the data so we have three columns, gender, score and question\nlong_responses <- responses %>% pivot_longer(cols = Q1_score:Q20_score, names_to = \"question\", values_to = \"score\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# summarise the data by gender and question\nresponse_summary <- long_responses %>% group_by(gender, question) %>% summarise(mean_score = mean(score,na.rm=TRUE))\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n`summarise()` has grouped output by 'gender'. You can override using the\n`.groups` argument.\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nquestion_difficulty <- response_summary %>%\n    filter(gender=='F') %>% \n    arrange(mean_score) %>% pull(question)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# create a factor for the response summary using the question difficulty order\nordered_responses <- response_summary %>% mutate(item = factor(question, levels=question_difficulty, ordered=TRUE))\n# create a factor for gender\nordered_responses <- ordered_responses %>% mutate(\n    gender = factor(gender)\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# plot the ordered responses as a line graph, grouped by gender with item on the x-axis, mean_score on the y-axis\np <- ggplot(ordered_responses, aes(x=item, y=mean_score, group=gender, colour=gender, line_style=gender))\np <- p + geom_line() # rotate the x-axis labels\np <- p + theme_light()\np <- p + theme(axis.text.x = element_text(angle = 90, hjust = 1))\np\n```\n\n::: {.cell-output-display}\n![](ct-dif_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n",
    "supporting": [
      "ct-dif_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}